CMAKE_MINIMUM_REQUIRED(VERSION 3.15.0 FATAL_ERROR)
SET(PROJECTNAME PythonModule)
PROJECT(${PROJECTNAME})
ADD_DEFINITIONS("-DPYTHON_API")
SET(CMAKE_CXX_STANDARD 11)

IF(NOT DEFINED Qt5_DIR)
	SET(Qt5_DIR "Qt5_DIR-NOTFOUND" CACHE PATH "Qt5_DIR")
ENDIF()
IF(Qt5_DIR STREQUAL "Qt5_DIR-NOTFOUND")		
	MESSAGE(FATAL_ERROR "Qt5_DIR is null, please specified Qt5Config.cmake location!~")
ENDIF()

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/../../output/bin)
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/../../output/bin)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
	SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/../../output/bin_d)    
	SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/../../output/bin) 
	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/../../output/bin_d)   
	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/../../output/bin)
ENDIF()

FILE(GLOB SRC_H_FILES "*.h")
FILE(GLOB SRC_CPP_FILES "*.cpp")
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../output/python37/include 
					${CMAKE_CURRENT_SOURCE_DIR}/..)

FIND_PACKAGE(Qt5 COMPONENTS Gui Widgets Core REQUIRED)
SET(CMAKE_AUTOMOC ON)
SOURCE_GROUP("Generated Files" FILES "${PROJECT_BINARY_DIR}/${PROJECTNAME}_autogen/mocs_compilation.cpp")

ADD_LIBRARY(${PROJECTNAME} SHARED ${SRC_H_FILES} ${SRC_CPP_FILES})
TARGET_LINK_LIBRARIES(${PROJECTNAME} Qt5::Gui Qt5::Widgets Qt5::Core)
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")	
	TARGET_LINK_LIBRARIES(${PROJECTNAME} debug ${CMAKE_CURRENT_SOURCE_DIR}/../../output/python37/lib/libpython3.7m.so.1.0 optimized ${CMAKE_CURRENT_SOURCE_DIR}/../../output/python37/lib/libpython3.7m.so.1.0)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")   
	TARGET_LINK_LIBRARIES(${PROJECTNAME} debug ${CMAKE_CURRENT_SOURCE_DIR}/../../output/python37/libs/python37_d.lib optimized ${CMAKE_CURRENT_SOURCE_DIR}/../../output/python37/libs/python37.lib)
ENDIF()